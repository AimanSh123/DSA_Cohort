 public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0){
            return null;
        }
        return mergeHelp(lists, 0, lists.length - 1);        
 }
 public ListNode mergeHelp(ListNode [] lists, int start, int end){
        if(start > end){ return null;}
        if(start == end){ return lists[start];}
        int mid = (start + end) / 2;
        ListNode res1 = mergeHelp(lists,start, mid);
        ListNode res2 = mergeHelp(lists, mid + 1, end);
        return mergeTwo(res1, res2);
 }
 public ListNode mergeTwo(ListNode l1, ListNode l2){
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        ListNode result = new ListNode(-1); ListNode ans = result;
        ListNode mov1 = l1; ListNode mov2 = l2;
        while(mov1 != null && mov2 != null){
            if(mov1.val > mov2.val){
                result.next = mov2; mov2 = mov2.next;
            }
            else{
                result.next = mov1; mov1 = mov1.next;
            }
            result = result.next;
        }
        result.next = mov1 != null? mov1: mov2;
        return ans.next;
}

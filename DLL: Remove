public int removeFirst(){
            if(head == null){
                return -1;
            }
            int val = head.val; size--;
              if(head.next == null){
                head = null;
                return val;
            }
            head.next.prev = null;
            head = head.next;
            return val;
}
public int removeLast(){
            if(head == null){
                tail = head = null;
                return -1;
            }
            size--;
            if( head.next == null){
                tail = head = null;
                return -1;
            }
            Node temp = this.head;
            while(temp.next != null){
                temp = temp.next;
            }
            int val = temp.val;
            Node previous = temp.prev;
            previous.next = null;
            tail = previous;
            return val;
        }
}
   public int removeAt(int idx){
            if(head == null || idx >= size || idx < 0){
                return -1;
            } 
            if(head.next == null){
            size--;
                Node temp = head;
                head = null;
                return temp.val;
            }
            else if(idx == 0){
                      return removeFirst();
            } 
            else if(idx == size - 1){
                      return removeLast();
            }
            size--;
            Node temp = head; int i = 0;
            while(temp != null && i < idx){
                temp = temp.next; i++;
            }
            Node nextOne = temp.next;
            Node previous = temp.prev;
            temp.next = null; temp.prev = null;
            previous.next = nextOne;
            return temp.val;
        }
          public int removeAfter(int idx){
            if(head == null || idx >= size - 1 || idx < 0){
                return -1;
            }
            int i = 0; Node temp = head;
            while(i != idx){
                temp = temp.next; i ++;
            }
            int value = 0; value = temp.next.val;
            if(temp.next.next != null) {
                Node previous = temp.next.next;
                temp.next = temp.next.next;
                previous.prev = temp;
            }
            else{
                temp.next.prev = null;
                temp.next = null;
                tail = temp;
            }
            size --;
            return value;
        }
    public int removeBefore(int idx){
            if(head == null || idx <= 0 || idx >= size){
                return -1;
            }
            int i = 0; Node temp = head;
            while(i != idx){
                temp = temp.next; i++;
            }
            Node curr = temp.prev;
            if(curr.prev == null){
                temp.prev = null;
                head = temp;
            }
            else{
                  curr.prev.next = temp;
                  temp.prev = curr.prev;
            }
            size--; curr.prev = curr.next = null;
            return curr.val;
        }
           public int removeNode(int idx){
            if(head == null || idx >= size || idx < 0){
                return -1;
            }
            int i = 0; Node temp = head;
            while(i != idx){
                temp = temp.next; i++;
            }
            if(temp == head){
                Node forw = temp.next;
                if(forw != null){
                    forw.prev = null;
                    head = temp.next;
                }
                else{
                    head = null;
                }

            }
            else if(temp == tail){
                 Node prev = temp.prev;
                 prev.next = null;
                 tail = prev;
            }
            else{
                Node prev = temp.prev;
                prev.next = temp.next;
                temp.next.prev = prev;
            }
            size--;
            temp.prev = temp.next = null;
            return temp.val;
        }
   

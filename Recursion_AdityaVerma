 public static int height(Node root){
        if(root == null){
            return 0;
        }
        int height = 0;
        for(Node child : root.children){
            int ht = height(child);
            if(ht > height){
                height = ht;
            }
        }
        return height + 1;
    }
   

public int[] sortArray(int[] nums) {
        if(nums.length == 1){
            return nums;
        }
        int [] answer = sortHelp(nums, nums.length - 1);
        return answer;
    }
    public int[] sortHelp(int [] nums, int index){
        if(index == 0){
            return nums;
        }
        int remain = nums[index];
        int [] answer = sortHelp(nums, index - 1);
        insert(answer, remain, index -1);
        return answer;
    }
    public void insert(int [] answer, int remain, int index){
        if(index < 0 || index >= answer.length - 1 || answer[index] < remain){
            return;
        }
        int i = 0;
        for(i = index; i >= 0; i--){
            if(answer[i] <= remain){
                break;
            }
            else{
                answer[i+1] = answer[i];
            }
        }
        answer[i + 1] =  remain;

    }
    //sort a stack
    #include <iostream>

using namespace std;
#include<vector>
#include<stack>
void insert(stack<int>&s,int temp){
    if(s.size()==0||s.top()<=temp){
        s.push(temp);
        return;
    }
    int val=s.top();
    s.pop();
    insert(s,temp);
    s.push(val);
    
    
}
void sort(stack<int>&s){
    if(s.size()==1){
        return ;
    }
    int temp=s.top();
    s.pop();
    sort(s);
    insert(s,temp);
    
}
int main()
{
    stack<int>s;
    int n;
    cin>>n;
    int element;
    for(int i=0;i<n;i++){
        cin>>element;
        s.push(element);
    }
    sort(s);
    while(!s.empty()){
        cout<<s.top()<<endl;
        s.pop();
        
    }
    
}
// k th symbol 
  int kthGrammar(int n, int k) {
        if(n==1&&k==1){
            return 0;
        }
        int mid=pow(2,n-1)/2;
        if(k<=mid){
            return kthGrammar(n-1,k);
        }
        else{
            return !kthGrammar(n-1,k-mid);
        }
    }
    
  //reverse a stack
  void addfirst(stack<int>&s,int element){
    if(s.empty()){
        s.push(element);
        return;
    }
    
    int val=s.top();
    s.pop();
    addfirst(s,element);
    s.push(val);
    
    
}
void reverse(stack<int>&s){
    if(s.size()==0){

        return;
    }
    int element=s.top();
    s.pop();
    reverse(s);
    addfirst(s,element);
    
 
    
}
int main()
{
    stack<int>s;
    int n;
    cin>>n;
    int element;
    for(int i=0;i<n;i++){
        cin>>element;  
        s.push(element);
    }

        reverse(s);
        cout<<"reverss"<<endl;
while(!s.empty()){
    cout<<s.top()<<endl;
s.pop();
}
 
 //delete middle element of a stack
 void solve(stack<int>&s,int k){
    if(k==1){
        s.pop();
        return;
    }
    
    int val=s.top();
    s.pop();
    solve(s,k-1);
    s.push(val);
    
    
}
stack<int> deletemid(stack<int>&s,int size){
    if(s.size()==0){
        return s;
    }
    int mid=size/2+1;
    
   
    solve(s,mid);
    
return s;
    
}
int main()
{
    stack<int>s;
    int n;
    cin>>n;
    int element;
    for(int i=0;i<n;i++){
        cin>>element;
        s.push(element);
    }
stack <int>ans=deletemid(s,n);
while(!ans.empty()){
    cout<<ans.top()<<endl;
    ans.pop();
}
//permutation 
void permutation(string s,string output){
    if(s.length()==0){
        cout<<output<<endl;
        return;
    }
    string op1=output;
    string op2=output;
    op1.push_back('_');
    op1.push_back(s[0]);
    op2.push_back(s[0]);
    s.erase( 0,1);
    permutation(s,op1);
    permutation(s,op2);
}
int main()
{
   string s;
   cin>>s;
   string output=" ";
   output.push_back(s[0]);
   s.erase( 0,1);
   permutation(s,output);
} 
    

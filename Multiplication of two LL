 public static ListNode multiplication(ListNode l1, ListNode l2){
        if(l1 == null || l2 == null){
            return null;
        }
        ListNode h1 = reverse(l1); ListNode h2 = reverse(l2);
        ListNode result = new ListNode(0); int count = 0;
        while(h2 != null){
            ListNode ans = multisingle(h1,h2);
            int anhelp = count;
            while(anhelp != 0){
               ans = addAtfirst(new ListNode(0),ans); anhelp --;
            }
            ans = reverse(ans);
            ListNode help = addTwoNumbers3(ans, result);
            h2 = h2.next; count ++;
        }
        return result;
    }
    public static ListNode multisingle(ListNode h1, ListNode h2) {
           ListNode result = new ListNode(-1);  ListNode temp = h1; int carry = 0;
           ListNode answer = result;
           while(temp != null){
               int sum = (temp.val * h2.val) + carry;
               answer.next = new ListNode(sum % 10);
               carry = sum / 10;
               temp = temp.next; answer = answer.next;
           }
           if(carry != 0){
               answer.next = new ListNode(carry);
               answer = answer.next;
           }
           return result.next;
    }

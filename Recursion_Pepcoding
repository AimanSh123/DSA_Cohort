 public static void printDecreasing(int n){
        if(n == 0){
            return;
        }
            System.out.println(n);
        printDecreasing(n - 1);
    }
    public static void printIncreasing(int n){
        if(n == 0){
            return;
        }
        System.out.println(n - 1);
        printIncreasing(n);
    }

    public static void printIncredecre(int n){
          if(n == 0){
              return ;
          }
        System.out.println(n);
        printIncredecre(n - 1);
        System.out.println(n);
    }

    public static int factorial(int n){
        if(n == 1){
            return 1;
        }
        int fact =  n * factorial(n - 1);
        return fact;

    }

    public static int power_linear(int base, int n){
        if(n == 0){
            return 1;
        }
         int number =  power_linear(base, n - 1);
         int answer = number * base;
        return answer;
    }

    public static int alt_power(int base, int n){
        int power = 0;
        if(n == 0){
            return 1;
        }
        else if(n % 2 == 0){
            power = alt_power(base, n/2) * alt_power(base, n/2);
        }
        else {
            power =  base * alt_power(base, n / 2) * alt_power(base, n / 2);
        }
        return power;
    }
    public static void toh(int n, int t1, int t2, int t3){
        if(n == 0){
            return;
        }
        toh(n-1,t1,t3,t2);
        System.out.println(n + "[" + t1 + " -> " + t2 + "]");
        toh(n-1,t3,t2,t1);

    }
    public static void print(int [] a, int index){

        if(index == a.length ){
            return;
        }
        System.out.println(a[index]);
        print(a, index + 1);

    }

    public static void print_reverse(int [] a, int index){

        if(index == -1 ){
            return;
        }
        System.out.println(a[index]);
        print_reverse(a, index - 1);

    }
    public static int maxofArray(int [] a, int index){
        if(index == a.length - 1){
            return a[index];
        }
        int max_of_small = maxofArray(a, index + 1);
        if(max_of_small > a[index]){
            return max_of_small;
        }
        else{
            return a[index];
        }
    }
     public static int first_index(int [] a, int index, int x){
         if (index == a.length){
             return -1;
         }
        int value = first_index(a, index + 1, x);
        if(a[index] == x){
             return index;
        }
        else{
            return value;
        }
    }
       public static List<String> paths = new ArrayList<>();
    public static void getStairPath(int count, String path){
        if(count < 0){
            return;
        }
        if(count == 0){
            paths.add(path);
            return;
        }
        getStairPath(count - 1,path + "1 ");
        getStairPath(count - 2,path + "2 ");
        getStairPath(count - 3,path + "3 ");
    }
   public static ArrayList<String> printSubSequence(String s){
        if(s.length() == 1){
            ArrayList<String> list = new ArrayList<>();
            list.add(s);
            list.add("");
            return list;
        }
        char ch = s.charAt(0);
        ArrayList<String> rest = printSubSequence(s.substring(1));
        ArrayList<String> result = new ArrayList<>();
        for(String el : rest){
            result.add(el);
            result.add(ch + el);
        }
        return result;
    }
    public static String [] codes = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    public static List<String> letterCombinations(String digits) {
        if(digits.length() == 0){
            List<String> answer = new ArrayList<>();
            answer.add("");
            return answer;
        }
        char ch = digits.charAt(0);
        List<String> answer = new ArrayList<>();
        List<String> rest = letterCombinations(digits.substring(1));
        int val = (int) ch - '0';
        for(String el : rest){
            for(int i = 0; i < codes[val].length();i++){
                answer.add(codes[val].charAt(i) + el);
            }
        }
        return answer;
    }
  
   
     public static void getMazePath(int ss, int sd, int ds, int dd, String path){
        if(ss > ds || sd > dd){
            return;
        }
        if(ss == ds && sd == dd){
            System.out.println(path);
        }
        getMazePath(ss + 1, sd, ds, dd, path + "side ");
        getMazePath(ss, sd + 1, ds, dd, path + "down ");

    }
     public static void getMazePathJump(int ss, int sd, int ds, int dd, String path){
        if(ss > ds || sd > dd){
            return;
        }
        if(ss == ds && ds == sd){
//            System.out.println("source side is " + ss + "source down is " + sd);
            System.out.println(path + "  ");
            return;
        }
        getMazePathJump(ss + 1, sd, ds, dd, path + "side ");
        getMazePathJump(ss + 2, sd, ds, dd, path + "side side ");
        getMazePathJump(ss, sd + 1, ds, dd, path + "down ");
        getMazePathJump(ss, sd + 2, ds, dd, path + "down down");

    }
    public static List<String> getMazePathJump3(int sr, int sc, int dr, int dc){
        List<String> result = new ArrayList<>();
        if(sr == dr && sc == dc){
            result.add("");
            return result;
        }
        for(int i = 1; i <= dr - sr; i++){
            List<String> hpath = getMazePathJump3(sr + i, sc, dr, dc);
           for(String el : hpath){
               result.add(el + 'v' + i);
           }
        }
        for(int i = 1; i <= dc - sc; i++){
            List<String> vpath = getMazePathJump3(sr , sc + i, dr, dc);
            for(String el : vpath){
                result.add(el + 'h' + i);
            }
        }
        for(int i = 1; i <= dr - sr && i <= dc - sc; i++){
            List<String> dpath = getMazePathJump3(sr + i, sc + i, dr, dc);
            for(String el : dpath){
                result.add(el + 'd' + i);
            }
        }
        return result;
    }
    public static void printPermutation(int n, String s, String res){
//        System.out.println(s);
//        System.out.println(res);
        if(res.length() == n){
            System.out.println("result is " + res);
            return;
        }
        for(int i = 0; i < s.length(); i++){
            printPermutation(n,s.substring(0,i) + s.substring(i + 1),res + s.charAt(i));
        }
    }
    
       public static void printSubSetTok(int [] input, int idx, int k,int sumreached, int [] output){
        if(sumreached > k){
            return;
        }
        if(k == sumreached){
            for(int i = 0; i < output.length; i++){
                System.out.print(output[i] + " ");
            }
            System.out.println();
            return;
        }
        int [] newoutput = new int [output.length + 1];
        int i = 0;
        for(i = 0; i < output.length; i++){
            newoutput[i] = output[i];
        }
        for(int j = idx; j < input.length ;j++){
            newoutput[i] = input[j];
            printSubSetTok(input, j + 1, k, (sumreached + input[j]), newoutput);
        }

    }
 
 public static void printEncode(String str, String res){
        if(str == ""){
            System.out.println(res);
            return;
        }
        int ch = str.charAt(0) - '0';
        int val = (ch + 'a' - 1);
        char c = (char) (val);
        printEncode(str.substring(1), res + c);
        if(str.length() >= 2) {
            int second = Integer.parseInt(str.substring(0,2));
            if(second > 26){
                return;
            }
            char secondch = (char) (second + 'a' - 1);
            printEncode(str.substring(2), res + secondch);
        }
    }
      public static void floodFill(int[][] maze, int sr, int sc, String asf, boolean [][] visited){
//        System.out.println("this part " + sr + "  " + sc);
        if(sr >= maze.length || sc < 0 || sr < 0 || sc >= maze[0].length || visited[sr][sc] == true || maze[sr][sc] == 1 ){
            return;
        }
        if(sr == maze.length - 1 && sc == maze[0].length - 1){
            System.out.println(asf);
            return;
        }
        visited[sr][sc] = true;
        floodFill(maze, sr, sc - 1, asf + "left ", visited);
        floodFill(maze, sr, sc + 1, asf + "right ",visited);
        floodFill(maze,sr + 1, sc,asf + "down ", visited);
        floodFill(maze, sr - 1, sc, asf + "up ", visited);
    }
public static void knighttour(int [][] board, int sr, int sc, int upcomemove){
        if(sr >= board.length || sr < 0 || sc >= board[0].length || sc < 0 || board[sr][sc] != 0){
            return;
        }
        if(upcomemove == board.length * board[0].length){
            board[sr][sc] = upcomemove;
            display(board);
            board[sr][sc] = 0;
            return;
        }
        board[sr][sc] = upcomemove;
        upcomemove ++;
        knighttour(board, sr - 2, sc + 1, upcomemove);
        knighttour(board, sr - 1, sc + 2, upcomemove);
        knighttour(board, sr + 1, sc + 2, upcomemove);
        knighttour(board, sr + 2, sc + 1, upcomemove);
        knighttour(board, sr - 2, sc - 1, upcomemove);
        knighttour(board, sr - 1, sc - 2, upcomemove);
        knighttour(board, sr + 1, sc - 2, upcomemove);
        knighttour(board, sr + 2, sc - 1, upcomemove);
        board[sr][sc] = 0;
    }
    public static void printNQueen(int [][] board, int sr, String ans){
        if(sr == board.length){
            System.out.println(ans + ".");
            return;
        }
        for(int i = 0; i < board[0].length; i++){
            if(queenSafe(board, sr, i)){
                board[sr][i] = 1;
                printNQueen(board, sr + 1, ans + sr + "-" + i + ", ");
                board[sr][i] = 0;
            }
        }
    }
    public static boolean queenSafe(int [][] board, int sr, int sc){
        int j = sc;
        for(int i = 0; i < sr; i++){
            if(board[i][j] == 1){
                return false;
            }
        }
        System.out.println(sr + " " + sc);
        for(int k = sr - 1, l = sc - 1; k >= 0 && l >= 0;l--, k--){
            if(board[k][l] == 1){
                return false;
            }
        }
        for(int k = sr - 1, l = sc + 1; k >= 0 && l < board[0].length;l++, k--){
            if(board[k][l] == 1){
                return false;
            }
        }
        return true;
    }
    
   

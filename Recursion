 public static void printDecreasing(int n){
        if(n == 0){
            return;
        }
            System.out.println(n);
        printDecreasing(n - 1);
    }
    public static void printIncreasing(int n){
        if(n == 0){
            return;
        }
        System.out.println(n - 1);
        printIncreasing(n);
    }

    public static void printIncredecre(int n){
          if(n == 0){
              return ;
          }
        System.out.println(n);
        printIncredecre(n - 1);
        System.out.println(n);
    }

    public static int factorial(int n){
        if(n == 1){
            return 1;
        }
        int fact =  n * factorial(n - 1);
        return fact;

    }

    public static int power_linear(int base, int n){
        if(n == 0){
            return 1;
        }
         int number =  power_linear(base, n - 1);
         int answer = number * base;
        return answer;
    }

    public static int alt_power(int base, int n){
        int power = 0;
        if(n == 0){
            return 1;
        }
        else if(n % 2 == 0){
            power = alt_power(base, n/2) * alt_power(base, n/2);
        }
        else {
            power =  base * alt_power(base, n / 2) * alt_power(base, n / 2);
        }
        return power;
    }
    public static void toh(int n, int t1, int t2, int t3){
        if(n == 0){
            return;
        }
        toh(n-1,t1,t3,t2);
        System.out.println(n + "[" + t1 + " -> " + t2 + "]");
        toh(n-1,t3,t2,t1);

    }
    public static void print(int [] a, int index){

        if(index == a.length ){
            return;
        }
        System.out.println(a[index]);
        print(a, index + 1);

    }

    public static void print_reverse(int [] a, int index){

        if(index == -1 ){
            return;
        }
        System.out.println(a[index]);
        print_reverse(a, index - 1);

    }
    public static int maxofArray(int [] a, int index){
        if(index == a.length - 1){
            return a[index];
        }
        int max_of_small = maxofArray(a, index + 1);
        if(max_of_small > a[index]){
            return max_of_small;
        }
        else{
            return a[index];
        }
    }
     public static int first_index(int [] a, int index, int x){
         if (index == a.length){
             return -1;
         }
        int value = first_index(a, index + 1, x);
        if(a[index] == x){
             return index;
        }
        else{
            return value;
        }
    }
       public static List<String> paths = new ArrayList<>();
    public static void getStairPath(int count, String path){
        if(count < 0){
            return;
        }
        if(count == 0){
            paths.add(path);
            return;
        }
        getStairPath(count - 1,path + "1 ");
        getStairPath(count - 2,path + "2 ");
        getStairPath(count - 3,path + "3 ");
    }
   public static ArrayList<String> printSubSequence(String s){
        if(s.length() == 1){
            ArrayList<String> list = new ArrayList<>();
            list.add(s);
            list.add("");
            return list;
        }
        char ch = s.charAt(0);
        ArrayList<String> rest = printSubSequence(s.substring(1));
        ArrayList<String> result = new ArrayList<>();
        for(String el : rest){
            result.add(el);
            result.add(ch + el);
        }
        return result;
    }
    public static String [] codes = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    public static List<String> letterCombinations(String digits) {
        if(digits.length() == 0){
            List<String> answer = new ArrayList<>();
            answer.add("");
            return answer;
        }
        char ch = digits.charAt(0);
        List<String> answer = new ArrayList<>();
        List<String> rest = letterCombinations(digits.substring(1));
        int val = (int) ch - '0';
        for(String el : rest){
            for(int i = 0; i < codes[val].length();i++){
                answer.add(codes[val].charAt(i) + el);
            }
        }
        return answer;
    }
  
   
     public static void getMazePath2(int ss, int sd, int ds, int dd, String path){
        if(ss > ds || sd > dd){
            return;
        }
        if(ss == ds && sd == dd){
            System.out.println(path);
        }
        getMazePath2(ss + 1, sd, ds, dd, path + "side ");
        getMazePath2(ss, sd + 1, ds, dd, path + "down ");

    }
   
